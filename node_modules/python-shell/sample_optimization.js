module.exports = function(RED) {
    function PythonShellNode(config) {
        RED.nodes.createNode(this,config);
        this.name = config.name;
        this.pypath = config.pypath;
				this.nn = config.nn;
				this.detector = config.detector;
				this.path = config.path;
				this.saveimage = config.saveimage;
				this.trim = config.trim;
				this.center = config.center;
				this.anchorpoint = config.anchorpoint;
				this.trimingsize= config.trimingsize;

        var node = this;
        node.on("input", function(msg) {
            try {
                var {PythonShell} = require('python-shell'); 
								var argsarray = [];
								if(node.nn){
										argsarray.push("-n"); argsarray.push(node.nn);
								}
								if(node.detector){
										argsarray.push("-d"); argsarray.push(node.detector);
								}
								if(node.path){
										argsarray.push("-path"); argsarray.push(node.path);
								}
								if(node.saveimage){
										argsarray.push("-s"); 
								}
								if(node.trim){
										argsarray.push("-tr");
								}
								if(node.center){
										argsarray.push("-c"); 
								}
								if(node.anchorpoint){
										argsarray.push("-ap"); argsarray.push(node.anchorpoint);
								}
								if(node.trimingsize){
										argsarray.push("-ts"); argsarray.push(node.trimingsize);
								}

                let options = {
                    pythonPath: node.pypath, 
                    pythonOptions: ['-u'],
										scriptPath: '/Users/nishijunpei/Desktop/SDTest-Commercial-CUI-master',
										args: argsarray,
                };

                PythonShell.run('sample_optimization.py' , options, function (err) {
                    if (err) {
                        msg.payload = err;
                    } else {
                    		msg.payload = "finished";
                    }
                    node.send(msg);
                });
            } catch(err) {
                node.error(err.message);
            }
        });
    }
    RED.nodes.registerType("python-shell",PythonShellNode);
}
