module.exports = function(RED) {
    function PythonShellNode(config) {
        RED.nodes.createNode(this,config);
        this.name = config.name;
        this.pypath = config.pypath;
				this.i2cinput = config.i2cinput;
				this.i2coutput = config.i2coutput;
				this.nn = config.nn;
				this.detector = config.detector;
				this.joblib = config.joblib;
				this.threshold = config.threshold;
				this.layer = config.layer;
				this.trim = config.trim;
				this.center = config.center;
				this.anchorpoint = config.anchorpoint;
				this.trimingsize= config.trimingsize;
				this.camera = config.camera;
				this.cameraid = config.cameraid;
				this.size = config.size;
				this.cameraguide = config.cameraguide;
				this.mirror = config.mirror;

        var node = this;
        node.on("input", function(msg) {
            try {
                var {PythonShell} = require('python-shell'); 
								var argsarray = [];
								if(node.i2cinput){
										argsarray.push("-i2c_input");
								}
								if(node.i2coutput){
										argsarray.push("-i2c_output");
								}
								if(node.nn){
										argsarray.push("-n", node.nn);
								}
								if(node.detector){
										argsarray.push("-d", node.detector);
								}
								if(node.joblib){
										argsarray.push("-jl", node.joblib);
								}
								if(node.threshold){
										argsarray.push("-t", node.threshold);
								}
								if(node.layer){
										argsarray.push("-l", node.layer);
								}
								if(node.trim){
										argsarray.push("-tr");
								}
								if(node.center){
										argsarray.push("-c"); 
								}
								if(node.anchorpoint){
										argsarray.push("-ap"); argsarray.push(node.anchorpoint);
								}
								if(node.trimingsize){
										argsarray.push("-ts"); argsarray.push(node.trimingsize);
								}
								if(node.camera){
										argsarray.push("-cam");
								}
								if(node.cameraid){
										argsarray.push("-ci"); argsarray.push(node.cameraid);
								}
								if(node.size){
										argsarray.push("-s"); argsarray.push(node.size);
								}
								if(node.cameraguide){
										argsarray.push("-g"); 
								}
								if(node.mirror){
										argsarray.push("-m");
								}
                let options = {
                    pythonPath: node.pypath, 
                    pythonOptions: ['-u'],
										scriptPath: '/Users/nishijunpei/Desktop/SDTest-Commercial-CUI-master',
										args: argsarray,
                };

                PythonShell.run(make_dataset.py, options, function (err) {
                    if (err) {
                        msg.payload = err;
                    } else {
                    		msg.payload = "finished";
                    }
                    node.send(msg);
                });
            } catch(err) {
                node.error(err.message);
            }
        });
    }
    RED.nodes.registerType("make-dataset",PythonShellNode);
}
